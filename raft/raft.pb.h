// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto;
namespace jraft {
class AppendEntriesRequest;
class AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendEntriesResponse;
class AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class RequestVoteRequest;
class RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
class RequestVoteResponse;
class RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
}  // namespace jraft
PROTOBUF_NAMESPACE_OPEN
template<> ::jraft::AppendEntriesRequest* Arena::CreateMaybeMessage<::jraft::AppendEntriesRequest>(Arena*);
template<> ::jraft::AppendEntriesResponse* Arena::CreateMaybeMessage<::jraft::AppendEntriesResponse>(Arena*);
template<> ::jraft::RequestVoteRequest* Arena::CreateMaybeMessage<::jraft::RequestVoteRequest>(Arena*);
template<> ::jraft::RequestVoteResponse* Arena::CreateMaybeMessage<::jraft::RequestVoteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jraft {

// ===================================================================

class RequestVoteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jraft.RequestVoteRequest) */ {
 public:
  RequestVoteRequest();
  virtual ~RequestVoteRequest();

  RequestVoteRequest(const RequestVoteRequest& from);
  RequestVoteRequest(RequestVoteRequest&& from) noexcept
    : RequestVoteRequest() {
    *this = ::std::move(from);
  }

  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
               &_RequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteRequest* New() const final {
    return CreateMaybeMessage<RequestVoteRequest>(nullptr);
  }

  RequestVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteRequest& from);
  void MergeFrom(const RequestVoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jraft.RequestVoteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 3,
    kLastLogIndexFieldNumber = 4,
    kLastLogTermFieldNumber = 5,
  };
  // required string peerId = 2;
  bool has_peerid() const;
  private:
  bool _internal_has_peerid() const;
  public:
  void clear_peerid();
  const std::string& peerid() const;
  void set_peerid(const std::string& value);
  void set_peerid(std::string&& value);
  void set_peerid(const char* value);
  void set_peerid(const char* value, size_t size);
  std::string* mutable_peerid();
  std::string* release_peerid();
  void set_allocated_peerid(std::string* peerid);
  private:
  const std::string& _internal_peerid() const;
  void _internal_set_peerid(const std::string& value);
  std::string* _internal_mutable_peerid();
  public:

  // required int64 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 candidateId = 3;
  bool has_candidateid() const;
  private:
  bool _internal_has_candidateid() const;
  public:
  void clear_candidateid();
  ::PROTOBUF_NAMESPACE_ID::int64 candidateid() const;
  void set_candidateid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_candidateid() const;
  void _internal_set_candidateid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 lastLogIndex = 4;
  bool has_lastlogindex() const;
  private:
  bool _internal_has_lastlogindex() const;
  public:
  void clear_lastlogindex();
  ::PROTOBUF_NAMESPACE_ID::int64 lastlogindex() const;
  void set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastlogindex() const;
  void _internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 lastLogTerm = 5;
  bool has_lastlogterm() const;
  private:
  bool _internal_has_lastlogterm() const;
  public:
  void clear_lastlogterm();
  ::PROTOBUF_NAMESPACE_ID::int64 lastlogterm() const;
  void set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastlogterm() const;
  void _internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:jraft.RequestVoteRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peerid_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 candidateid_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastlogindex_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastlogterm_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jraft.RequestVoteResponse) */ {
 public:
  RequestVoteResponse();
  virtual ~RequestVoteResponse();

  RequestVoteResponse(const RequestVoteResponse& from);
  RequestVoteResponse(RequestVoteResponse&& from) noexcept
    : RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
               &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResponse* New() const final {
    return CreateMaybeMessage<RequestVoteResponse>(nullptr);
  }

  RequestVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteResponse& from);
  void MergeFrom(const RequestVoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jraft.RequestVoteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // required int64 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool voteGranted = 2;
  bool has_votegranted() const;
  private:
  bool _internal_has_votegranted() const;
  public:
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:jraft.RequestVoteResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  bool votegranted_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jraft.AppendEntriesRequest) */ {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest* New() const final {
    return CreateMaybeMessage<AppendEntriesRequest>(nullptr);
  }

  AppendEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jraft.AppendEntriesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kPeerIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kCommitedIndexFieldNumber = 6,
  };
  // repeated string entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // required string peerId = 2;
  bool has_peerid() const;
  private:
  bool _internal_has_peerid() const;
  public:
  void clear_peerid();
  const std::string& peerid() const;
  void set_peerid(const std::string& value);
  void set_peerid(std::string&& value);
  void set_peerid(const char* value);
  void set_peerid(const char* value, size_t size);
  std::string* mutable_peerid();
  std::string* release_peerid();
  void set_allocated_peerid(std::string* peerid);
  private:
  const std::string& _internal_peerid() const;
  void _internal_set_peerid(const std::string& value);
  std::string* _internal_mutable_peerid();
  public:

  // required int64 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 prevLogIndex = 3;
  bool has_prevlogindex() const;
  private:
  bool _internal_has_prevlogindex() const;
  public:
  void clear_prevlogindex();
  ::PROTOBUF_NAMESPACE_ID::int64 prevlogindex() const;
  void set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_prevlogindex() const;
  void _internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 prevLogTerm = 4;
  bool has_prevlogterm() const;
  private:
  bool _internal_has_prevlogterm() const;
  public:
  void clear_prevlogterm();
  ::PROTOBUF_NAMESPACE_ID::int64 prevlogterm() const;
  void set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_prevlogterm() const;
  void _internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 commitedIndex = 6;
  bool has_commitedindex() const;
  private:
  bool _internal_has_commitedindex() const;
  public:
  void clear_commitedindex();
  ::PROTOBUF_NAMESPACE_ID::int64 commitedindex() const;
  void set_commitedindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_commitedindex() const;
  void _internal_set_commitedindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:jraft.AppendEntriesRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peerid_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 prevlogindex_;
  ::PROTOBUF_NAMESPACE_ID::int64 prevlogterm_;
  ::PROTOBUF_NAMESPACE_ID::int64 commitedindex_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jraft.AppendEntriesResponse) */ {
 public:
  AppendEntriesResponse();
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);
  AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
    : AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
               &_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResponse* New() const final {
    return CreateMaybeMessage<AppendEntriesResponse>(nullptr);
  }

  AppendEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jraft.AppendEntriesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // required int64 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool success = 2;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:jraft.AppendEntriesResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  bool success_;
  friend struct ::TableStruct_raft_2eproto;
};
// ===================================================================

class RaftService_Stub;

class RaftService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftService() {};
 public:
  virtual ~RaftService();

  typedef RaftService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void PreVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::jraft::RequestVoteRequest* request,
                       ::jraft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::jraft::RequestVoteRequest* request,
                       ::jraft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::jraft::AppendEntriesRequest* request,
                       ::jraft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService);
};

class RaftService_Stub : public RaftService {
 public:
  RaftService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RaftService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RaftService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RaftService ------------------------------------------

  void PreVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::jraft::RequestVoteRequest* request,
                       ::jraft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::jraft::RequestVoteRequest* request,
                       ::jraft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::jraft::AppendEntriesRequest* request,
                       ::jraft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteRequest

// required int64 term = 1;
inline bool RequestVoteRequest::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_term() const {
  return _internal_has_term();
}
inline void RequestVoteRequest::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:jraft.RequestVoteRequest.term)
  return _internal_term();
}
inline void RequestVoteRequest::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
}
inline void RequestVoteRequest::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:jraft.RequestVoteRequest.term)
}

// required string peerId = 2;
inline bool RequestVoteRequest::_internal_has_peerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_peerid() const {
  return _internal_has_peerid();
}
inline void RequestVoteRequest::clear_peerid() {
  peerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestVoteRequest::peerid() const {
  // @@protoc_insertion_point(field_get:jraft.RequestVoteRequest.peerId)
  return _internal_peerid();
}
inline void RequestVoteRequest::set_peerid(const std::string& value) {
  _internal_set_peerid(value);
  // @@protoc_insertion_point(field_set:jraft.RequestVoteRequest.peerId)
}
inline std::string* RequestVoteRequest::mutable_peerid() {
  // @@protoc_insertion_point(field_mutable:jraft.RequestVoteRequest.peerId)
  return _internal_mutable_peerid();
}
inline const std::string& RequestVoteRequest::_internal_peerid() const {
  return peerid_.GetNoArena();
}
inline void RequestVoteRequest::_internal_set_peerid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestVoteRequest::set_peerid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jraft.RequestVoteRequest.peerId)
}
inline void RequestVoteRequest::set_peerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jraft.RequestVoteRequest.peerId)
}
inline void RequestVoteRequest::set_peerid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jraft.RequestVoteRequest.peerId)
}
inline std::string* RequestVoteRequest::_internal_mutable_peerid() {
  _has_bits_[0] |= 0x00000001u;
  return peerid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestVoteRequest::release_peerid() {
  // @@protoc_insertion_point(field_release:jraft.RequestVoteRequest.peerId)
  if (!has_peerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return peerid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteRequest::set_allocated_peerid(std::string* peerid) {
  if (peerid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  peerid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peerid);
  // @@protoc_insertion_point(field_set_allocated:jraft.RequestVoteRequest.peerId)
}

// required int64 candidateId = 3;
inline bool RequestVoteRequest::_internal_has_candidateid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_candidateid() const {
  return _internal_has_candidateid();
}
inline void RequestVoteRequest::clear_candidateid() {
  candidateid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::_internal_candidateid() const {
  return candidateid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::candidateid() const {
  // @@protoc_insertion_point(field_get:jraft.RequestVoteRequest.candidateId)
  return _internal_candidateid();
}
inline void RequestVoteRequest::_internal_set_candidateid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  candidateid_ = value;
}
inline void RequestVoteRequest::set_candidateid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:jraft.RequestVoteRequest.candidateId)
}

// required int64 lastLogIndex = 4;
inline bool RequestVoteRequest::_internal_has_lastlogindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_lastlogindex() const {
  return _internal_has_lastlogindex();
}
inline void RequestVoteRequest::clear_lastlogindex() {
  lastlogindex_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::_internal_lastlogindex() const {
  return lastlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::lastlogindex() const {
  // @@protoc_insertion_point(field_get:jraft.RequestVoteRequest.lastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteRequest::_internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  lastlogindex_ = value;
}
inline void RequestVoteRequest::set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:jraft.RequestVoteRequest.lastLogIndex)
}

// required int64 lastLogTerm = 5;
inline bool RequestVoteRequest::_internal_has_lastlogterm() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_lastlogterm() const {
  return _internal_has_lastlogterm();
}
inline void RequestVoteRequest::clear_lastlogterm() {
  lastlogterm_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::lastlogterm() const {
  // @@protoc_insertion_point(field_get:jraft.RequestVoteRequest.lastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteRequest::_internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  lastlogterm_ = value;
}
inline void RequestVoteRequest::set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:jraft.RequestVoteRequest.lastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteResponse

// required int64 term = 1;
inline bool RequestVoteResponse::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestVoteResponse::has_term() const {
  return _internal_has_term();
}
inline void RequestVoteResponse::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:jraft.RequestVoteResponse.term)
  return _internal_term();
}
inline void RequestVoteResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void RequestVoteResponse::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:jraft.RequestVoteResponse.term)
}

// required bool voteGranted = 2;
inline bool RequestVoteResponse::_internal_has_votegranted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestVoteResponse::has_votegranted() const {
  return _internal_has_votegranted();
}
inline void RequestVoteResponse::clear_votegranted() {
  votegranted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RequestVoteResponse::_internal_votegranted() const {
  return votegranted_;
}
inline bool RequestVoteResponse::votegranted() const {
  // @@protoc_insertion_point(field_get:jraft.RequestVoteResponse.voteGranted)
  return _internal_votegranted();
}
inline void RequestVoteResponse::_internal_set_votegranted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  votegranted_ = value;
}
inline void RequestVoteResponse::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:jraft.RequestVoteResponse.voteGranted)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// required int64 term = 1;
inline bool AppendEntriesRequest::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppendEntriesRequest::has_term() const {
  return _internal_has_term();
}
inline void AppendEntriesRequest::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:jraft.AppendEntriesRequest.term)
  return _internal_term();
}
inline void AppendEntriesRequest::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
}
inline void AppendEntriesRequest::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:jraft.AppendEntriesRequest.term)
}

// required string peerId = 2;
inline bool AppendEntriesRequest::_internal_has_peerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppendEntriesRequest::has_peerid() const {
  return _internal_has_peerid();
}
inline void AppendEntriesRequest::clear_peerid() {
  peerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppendEntriesRequest::peerid() const {
  // @@protoc_insertion_point(field_get:jraft.AppendEntriesRequest.peerId)
  return _internal_peerid();
}
inline void AppendEntriesRequest::set_peerid(const std::string& value) {
  _internal_set_peerid(value);
  // @@protoc_insertion_point(field_set:jraft.AppendEntriesRequest.peerId)
}
inline std::string* AppendEntriesRequest::mutable_peerid() {
  // @@protoc_insertion_point(field_mutable:jraft.AppendEntriesRequest.peerId)
  return _internal_mutable_peerid();
}
inline const std::string& AppendEntriesRequest::_internal_peerid() const {
  return peerid_.GetNoArena();
}
inline void AppendEntriesRequest::_internal_set_peerid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AppendEntriesRequest::set_peerid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jraft.AppendEntriesRequest.peerId)
}
inline void AppendEntriesRequest::set_peerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jraft.AppendEntriesRequest.peerId)
}
inline void AppendEntriesRequest::set_peerid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jraft.AppendEntriesRequest.peerId)
}
inline std::string* AppendEntriesRequest::_internal_mutable_peerid() {
  _has_bits_[0] |= 0x00000001u;
  return peerid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendEntriesRequest::release_peerid() {
  // @@protoc_insertion_point(field_release:jraft.AppendEntriesRequest.peerId)
  if (!has_peerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return peerid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_allocated_peerid(std::string* peerid) {
  if (peerid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  peerid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peerid);
  // @@protoc_insertion_point(field_set_allocated:jraft.AppendEntriesRequest.peerId)
}

// required int64 prevLogIndex = 3;
inline bool AppendEntriesRequest::_internal_has_prevlogindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppendEntriesRequest::has_prevlogindex() const {
  return _internal_has_prevlogindex();
}
inline void AppendEntriesRequest::clear_prevlogindex() {
  prevlogindex_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::_internal_prevlogindex() const {
  return prevlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::prevlogindex() const {
  // @@protoc_insertion_point(field_get:jraft.AppendEntriesRequest.prevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntriesRequest::_internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  prevlogindex_ = value;
}
inline void AppendEntriesRequest::set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:jraft.AppendEntriesRequest.prevLogIndex)
}

// required int64 prevLogTerm = 4;
inline bool AppendEntriesRequest::_internal_has_prevlogterm() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppendEntriesRequest::has_prevlogterm() const {
  return _internal_has_prevlogterm();
}
inline void AppendEntriesRequest::clear_prevlogterm() {
  prevlogterm_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::_internal_prevlogterm() const {
  return prevlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::prevlogterm() const {
  // @@protoc_insertion_point(field_get:jraft.AppendEntriesRequest.prevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesRequest::_internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  prevlogterm_ = value;
}
inline void AppendEntriesRequest::set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:jraft.AppendEntriesRequest.prevLogTerm)
}

// repeated string entries = 5;
inline int AppendEntriesRequest::_internal_entries_size() const {
  return entries_.size();
}
inline int AppendEntriesRequest::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline std::string* AppendEntriesRequest::add_entries() {
  // @@protoc_insertion_point(field_add_mutable:jraft.AppendEntriesRequest.entries)
  return _internal_add_entries();
}
inline const std::string& AppendEntriesRequest::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const std::string& AppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:jraft.AppendEntriesRequest.entries)
  return _internal_entries(index);
}
inline std::string* AppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:jraft.AppendEntriesRequest.entries)
  return entries_.Mutable(index);
}
inline void AppendEntriesRequest::set_entries(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:jraft.AppendEntriesRequest.entries)
  entries_.Mutable(index)->assign(value);
}
inline void AppendEntriesRequest::set_entries(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:jraft.AppendEntriesRequest.entries)
  entries_.Mutable(index)->assign(std::move(value));
}
inline void AppendEntriesRequest::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jraft.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jraft.AppendEntriesRequest.entries)
}
inline std::string* AppendEntriesRequest::_internal_add_entries() {
  return entries_.Add();
}
inline void AppendEntriesRequest::add_entries(const std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jraft.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::add_entries(std::string&& value) {
  entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jraft.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jraft.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jraft.AppendEntriesRequest.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:jraft.AppendEntriesRequest.entries)
  return entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:jraft.AppendEntriesRequest.entries)
  return &entries_;
}

// required int64 commitedIndex = 6;
inline bool AppendEntriesRequest::_internal_has_commitedindex() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppendEntriesRequest::has_commitedindex() const {
  return _internal_has_commitedindex();
}
inline void AppendEntriesRequest::clear_commitedindex() {
  commitedindex_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::_internal_commitedindex() const {
  return commitedindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::commitedindex() const {
  // @@protoc_insertion_point(field_get:jraft.AppendEntriesRequest.commitedIndex)
  return _internal_commitedindex();
}
inline void AppendEntriesRequest::_internal_set_commitedindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  commitedindex_ = value;
}
inline void AppendEntriesRequest::set_commitedindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_commitedindex(value);
  // @@protoc_insertion_point(field_set:jraft.AppendEntriesRequest.commitedIndex)
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// required int64 term = 1;
inline bool AppendEntriesResponse::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppendEntriesResponse::has_term() const {
  return _internal_has_term();
}
inline void AppendEntriesResponse::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:jraft.AppendEntriesResponse.term)
  return _internal_term();
}
inline void AppendEntriesResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void AppendEntriesResponse::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:jraft.AppendEntriesResponse.term)
}

// required bool success = 2;
inline bool AppendEntriesResponse::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppendEntriesResponse::has_success() const {
  return _internal_has_success();
}
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AppendEntriesResponse::_internal_success() const {
  return success_;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:jraft.AppendEntriesResponse.success)
  return _internal_success();
}
inline void AppendEntriesResponse::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
}
inline void AppendEntriesResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:jraft.AppendEntriesResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jraft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
