// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_2eproto;
namespace jraft {
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class PersistState;
class PersistStateDefaultTypeInternal;
extern PersistStateDefaultTypeInternal _PersistState_default_instance_;
}  // namespace jraft
PROTOBUF_NAMESPACE_OPEN
template<> ::jraft::LogEntry* Arena::CreateMaybeMessage<::jraft::LogEntry>(Arena*);
template<> ::jraft::PersistState* Arena::CreateMaybeMessage<::jraft::PersistState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jraft {

enum EntryType : int {
  ENTRY_TYPE_NOOP = 0,
  ENTRY_TYPE_DATA = 1,
  ENTRY_TYPE_CONFIGURATION = 3
};
bool EntryType_IsValid(int value);
constexpr EntryType EntryType_MIN = ENTRY_TYPE_NOOP;
constexpr EntryType EntryType_MAX = ENTRY_TYPE_CONFIGURATION;
constexpr int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor();
template<typename T>
inline const std::string& EntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntryType_descriptor(), enum_t_value);
}
inline bool EntryType_Parse(
    const std::string& name, EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
// ===================================================================

class LogEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jraft.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jraft.LogEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 4,
    kTermFieldNumber = 2,
    kIndexFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // required string command = 4;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // required int64 term = 2;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .jraft.EntryType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::jraft::EntryType type() const;
  void set_type(::jraft::EntryType value);
  private:
  ::jraft::EntryType _internal_type() const;
  void _internal_set_type(::jraft::EntryType value);
  public:

  // @@protoc_insertion_point(class_scope:jraft.LogEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  int type_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class PersistState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jraft.PersistState) */ {
 public:
  PersistState();
  virtual ~PersistState();

  PersistState(const PersistState& from);
  PersistState(PersistState&& from) noexcept
    : PersistState() {
    *this = ::std::move(from);
  }

  inline PersistState& operator=(const PersistState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistState& operator=(PersistState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistState* internal_default_instance() {
    return reinterpret_cast<const PersistState*>(
               &_PersistState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PersistState& a, PersistState& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistState* New() const final {
    return CreateMaybeMessage<PersistState>(nullptr);
  }

  PersistState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistState& from);
  void MergeFrom(const PersistState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jraft.PersistState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 3,
    kCurrentTermFieldNumber = 1,
    kVotedForFieldNumber = 2,
  };
  // repeated .jraft.LogEntry logs = 3;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::jraft::LogEntry* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jraft::LogEntry >*
      mutable_logs();
  private:
  const ::jraft::LogEntry& _internal_logs(int index) const;
  ::jraft::LogEntry* _internal_add_logs();
  public:
  const ::jraft::LogEntry& logs(int index) const;
  ::jraft::LogEntry* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jraft::LogEntry >&
      logs() const;

  // required int64 currentTerm = 1;
  bool has_currentterm() const;
  private:
  bool _internal_has_currentterm() const;
  public:
  void clear_currentterm();
  ::PROTOBUF_NAMESPACE_ID::int64 currentterm() const;
  void set_currentterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_currentterm() const;
  void _internal_set_currentterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 votedFor = 2;
  bool has_votedfor() const;
  private:
  bool _internal_has_votedfor() const;
  public:
  void clear_votedfor();
  ::PROTOBUF_NAMESPACE_ID::int64 votedfor() const;
  void set_votedfor(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_votedfor() const;
  void _internal_set_votedfor(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:jraft.PersistState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jraft::LogEntry > logs_;
  ::PROTOBUF_NAMESPACE_ID::int64 currentterm_;
  ::PROTOBUF_NAMESPACE_ID::int64 votedfor_;
  friend struct ::TableStruct_state_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntry

// required .jraft.EntryType type = 1;
inline bool LogEntry::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogEntry::has_type() const {
  return _internal_has_type();
}
inline void LogEntry::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::jraft::EntryType LogEntry::_internal_type() const {
  return static_cast< ::jraft::EntryType >(type_);
}
inline ::jraft::EntryType LogEntry::type() const {
  // @@protoc_insertion_point(field_get:jraft.LogEntry.type)
  return _internal_type();
}
inline void LogEntry::_internal_set_type(::jraft::EntryType value) {
  assert(::jraft::EntryType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void LogEntry::set_type(::jraft::EntryType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:jraft.LogEntry.type)
}

// required int64 term = 2;
inline bool LogEntry::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogEntry::has_term() const {
  return _internal_has_term();
}
inline void LogEntry::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:jraft.LogEntry.term)
  return _internal_term();
}
inline void LogEntry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
}
inline void LogEntry::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:jraft.LogEntry.term)
}

// required int64 index = 3;
inline bool LogEntry::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogEntry::has_index() const {
  return _internal_has_index();
}
inline void LogEntry::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntry::index() const {
  // @@protoc_insertion_point(field_get:jraft.LogEntry.index)
  return _internal_index();
}
inline void LogEntry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
}
inline void LogEntry::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:jraft.LogEntry.index)
}

// required string command = 4;
inline bool LogEntry::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogEntry::has_command() const {
  return _internal_has_command();
}
inline void LogEntry::clear_command() {
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:jraft.LogEntry.command)
  return _internal_command();
}
inline void LogEntry::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:jraft.LogEntry.command)
}
inline std::string* LogEntry::mutable_command() {
  // @@protoc_insertion_point(field_mutable:jraft.LogEntry.command)
  return _internal_mutable_command();
}
inline const std::string& LogEntry::_internal_command() const {
  return command_.GetNoArena();
}
inline void LogEntry::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogEntry::set_command(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jraft.LogEntry.command)
}
inline void LogEntry::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jraft.LogEntry.command)
}
inline void LogEntry::set_command(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jraft.LogEntry.command)
}
inline std::string* LogEntry::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  return command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:jraft.LogEntry.command)
  if (!has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return command_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:jraft.LogEntry.command)
}

// -------------------------------------------------------------------

// PersistState

// required int64 currentTerm = 1;
inline bool PersistState::_internal_has_currentterm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PersistState::has_currentterm() const {
  return _internal_has_currentterm();
}
inline void PersistState::clear_currentterm() {
  currentterm_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistState::_internal_currentterm() const {
  return currentterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistState::currentterm() const {
  // @@protoc_insertion_point(field_get:jraft.PersistState.currentTerm)
  return _internal_currentterm();
}
inline void PersistState::_internal_set_currentterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  currentterm_ = value;
}
inline void PersistState::set_currentterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_currentterm(value);
  // @@protoc_insertion_point(field_set:jraft.PersistState.currentTerm)
}

// required int64 votedFor = 2;
inline bool PersistState::_internal_has_votedfor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PersistState::has_votedfor() const {
  return _internal_has_votedfor();
}
inline void PersistState::clear_votedfor() {
  votedfor_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistState::_internal_votedfor() const {
  return votedfor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistState::votedfor() const {
  // @@protoc_insertion_point(field_get:jraft.PersistState.votedFor)
  return _internal_votedfor();
}
inline void PersistState::_internal_set_votedfor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  votedfor_ = value;
}
inline void PersistState::set_votedfor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_votedfor(value);
  // @@protoc_insertion_point(field_set:jraft.PersistState.votedFor)
}

// repeated .jraft.LogEntry logs = 3;
inline int PersistState::_internal_logs_size() const {
  return logs_.size();
}
inline int PersistState::logs_size() const {
  return _internal_logs_size();
}
inline void PersistState::clear_logs() {
  logs_.Clear();
}
inline ::jraft::LogEntry* PersistState::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:jraft.PersistState.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jraft::LogEntry >*
PersistState::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:jraft.PersistState.logs)
  return &logs_;
}
inline const ::jraft::LogEntry& PersistState::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::jraft::LogEntry& PersistState::logs(int index) const {
  // @@protoc_insertion_point(field_get:jraft.PersistState.logs)
  return _internal_logs(index);
}
inline ::jraft::LogEntry* PersistState::_internal_add_logs() {
  return logs_.Add();
}
inline ::jraft::LogEntry* PersistState::add_logs() {
  // @@protoc_insertion_point(field_add:jraft.PersistState.logs)
  return _internal_add_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jraft::LogEntry >&
PersistState::logs() const {
  // @@protoc_insertion_point(field_list:jraft.PersistState.logs)
  return logs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jraft

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::jraft::EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jraft::EntryType>() {
  return ::jraft::EntryType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_2eproto
