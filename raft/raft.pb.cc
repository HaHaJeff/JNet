// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace jraft {
class RequestVoteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteRequest> _instance;
} _RequestVoteRequest_default_instance_;
class RequestVoteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteResponse> _instance;
} _RequestVoteResponse_default_instance_;
class AppendEntriesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesRequest> _instance;
} _AppendEntriesRequest_default_instance_;
class AppendEntriesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesResponse> _instance;
} _AppendEntriesResponse_default_instance_;
}  // namespace jraft
static void InitDefaultsscc_info_AppendEntriesRequest_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jraft::_AppendEntriesRequest_default_instance_;
    new (ptr) ::jraft::AppendEntriesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jraft::AppendEntriesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendEntriesRequest_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendEntriesRequest_raft_2eproto}, {}};

static void InitDefaultsscc_info_AppendEntriesResponse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jraft::_AppendEntriesResponse_default_instance_;
    new (ptr) ::jraft::AppendEntriesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jraft::AppendEntriesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendEntriesResponse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendEntriesResponse_raft_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoteRequest_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jraft::_RequestVoteRequest_default_instance_;
    new (ptr) ::jraft::RequestVoteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jraft::RequestVoteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteRequest_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteRequest_raft_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoteResponse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jraft::_RequestVoteResponse_default_instance_;
    new (ptr) ::jraft::RequestVoteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jraft::RequestVoteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteResponse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteResponse_raft_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raft_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_raft_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_raft_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_raft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteRequest, term_),
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteRequest, peerid_),
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteRequest, candidateid_),
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteRequest, lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteRequest, lastlogterm_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteResponse, term_),
  PROTOBUF_FIELD_OFFSET(::jraft::RequestVoteResponse, votegranted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesRequest, term_),
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesRequest, peerid_),
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesRequest, prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesRequest, prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesRequest, entries_),
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesRequest, commitedindex_),
  1,
  0,
  2,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesResponse, term_),
  PROTOBUF_FIELD_OFFSET(::jraft::AppendEntriesResponse, success_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::jraft::RequestVoteRequest)},
  { 15, 22, sizeof(::jraft::RequestVoteResponse)},
  { 24, 35, sizeof(::jraft::AppendEntriesRequest)},
  { 41, 48, sizeof(::jraft::AppendEntriesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jraft::_RequestVoteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jraft::_RequestVoteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jraft::_AppendEntriesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jraft::_AppendEntriesResponse_default_instance_),
};

const char descriptor_table_protodef_raft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nraft.proto\022\005jraft\"r\n\022RequestVoteReques"
  "t\022\014\n\004term\030\001 \002(\003\022\016\n\006peerId\030\002 \002(\t\022\023\n\013candi"
  "dateId\030\003 \002(\003\022\024\n\014lastLogIndex\030\004 \002(\003\022\023\n\013la"
  "stLogTerm\030\005 \002(\003\"8\n\023RequestVoteResponse\022\014"
  "\n\004term\030\001 \002(\003\022\023\n\013voteGranted\030\002 \002(\010\"\207\001\n\024Ap"
  "pendEntriesRequest\022\014\n\004term\030\001 \002(\003\022\016\n\006peer"
  "Id\030\002 \002(\t\022\024\n\014prevLogIndex\030\003 \002(\003\022\023\n\013prevLo"
  "gTerm\030\004 \002(\003\022\017\n\007entries\030\005 \003(\t\022\025\n\rcommited"
  "Index\030\006 \002(\003\"6\n\025AppendEntriesResponse\022\014\n\004"
  "term\030\001 \002(\003\022\017\n\007success\030\002 \002(\0102\341\001\n\013RaftServ"
  "ice\022@\n\007PreVote\022\031.jraft.RequestVoteReques"
  "t\032\032.jraft.RequestVoteResponse\022D\n\013Request"
  "Vote\022\031.jraft.RequestVoteRequest\032\032.jraft."
  "RequestVoteResponse\022J\n\rAppendEntries\022\033.j"
  "raft.AppendEntriesRequest\032\034.jraft.Append"
  "EntriesResponseB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_raft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_raft_2eproto_sccs[4] = {
  &scc_info_AppendEntriesRequest_raft_2eproto.base,
  &scc_info_AppendEntriesResponse_raft_2eproto.base,
  &scc_info_RequestVoteRequest_raft_2eproto.base,
  &scc_info_RequestVoteResponse_raft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raft_2eproto_once;
static bool descriptor_table_raft_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto = {
  &descriptor_table_raft_2eproto_initialized, descriptor_table_protodef_raft_2eproto, "raft.proto", 620,
  &descriptor_table_raft_2eproto_once, descriptor_table_raft_2eproto_sccs, descriptor_table_raft_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_raft_2eproto::offsets,
  file_level_metadata_raft_2eproto, 4, file_level_enum_descriptors_raft_2eproto, file_level_service_descriptors_raft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raft_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_raft_2eproto), true);
namespace jraft {

// ===================================================================

void RequestVoteRequest::InitAsDefaultInstance() {
}
class RequestVoteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestVoteRequest>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_peerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_candidateid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lastlogindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lastlogterm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RequestVoteRequest::RequestVoteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jraft.RequestVoteRequest)
}
RequestVoteRequest::RequestVoteRequest(const RequestVoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_peerid()) {
    peerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peerid_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:jraft.RequestVoteRequest)
}

void RequestVoteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestVoteRequest_raft_2eproto.base);
  peerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVoteRequest::~RequestVoteRequest() {
  // @@protoc_insertion_point(destructor:jraft.RequestVoteRequest)
  SharedDtor();
}

void RequestVoteRequest::SharedDtor() {
  peerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestVoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteRequest& RequestVoteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteRequest_raft_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jraft.RequestVoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    peerid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastlogterm_) -
        reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RequestVoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string peerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_peerid(), ptr, ctx, "jraft.RequestVoteRequest.peerId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 candidateId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_candidateid(&has_bits);
          candidateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 lastLogIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lastlogindex(&has_bits);
          lastlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 lastLogTerm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lastlogterm(&has_bits);
          lastlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jraft.RequestVoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // required string peerId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_peerid().data(), static_cast<int>(this->_internal_peerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jraft.RequestVoteRequest.peerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peerid(), target);
  }

  // required int64 candidateId = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_candidateid(), target);
  }

  // required int64 lastLogIndex = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lastlogindex(), target);
  }

  // required int64 lastLogTerm = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jraft.RequestVoteRequest)
  return target;
}

size_t RequestVoteRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jraft.RequestVoteRequest)
  size_t total_size = 0;

  if (has_peerid()) {
    // required string peerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peerid());
  }

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  if (has_candidateid()) {
    // required int64 candidateId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_candidateid());
  }

  if (has_lastlogindex()) {
    // required int64 lastLogIndex = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastlogindex());
  }

  if (has_lastlogterm()) {
    // required int64 lastLogTerm = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastlogterm());
  }

  return total_size;
}
size_t RequestVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jraft.RequestVoteRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string peerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peerid());

    // required int64 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());

    // required int64 candidateId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_candidateid());

    // required int64 lastLogIndex = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastlogindex());

    // required int64 lastLogTerm = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastlogterm());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jraft.RequestVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jraft.RequestVoteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jraft.RequestVoteRequest)
    MergeFrom(*source);
  }
}

void RequestVoteRequest::MergeFrom(const RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jraft.RequestVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      peerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      candidateid_ = from.candidateid_;
    }
    if (cached_has_bits & 0x00000008u) {
      lastlogindex_ = from.lastlogindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      lastlogterm_ = from.lastlogterm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestVoteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jraft.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteRequest::CopyFrom(const RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jraft.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void RequestVoteRequest::InternalSwap(RequestVoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  peerid_.Swap(&other->peerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(candidateid_, other->candidateid_);
  swap(lastlogindex_, other->lastlogindex_);
  swap(lastlogterm_, other->lastlogterm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestVoteResponse::InitAsDefaultInstance() {
}
class RequestVoteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestVoteResponse>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_votegranted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RequestVoteResponse::RequestVoteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jraft.RequestVoteResponse)
}
RequestVoteResponse::RequestVoteResponse(const RequestVoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votegranted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  // @@protoc_insertion_point(copy_constructor:jraft.RequestVoteResponse)
}

void RequestVoteResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
}

RequestVoteResponse::~RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:jraft.RequestVoteResponse)
  SharedDtor();
}

void RequestVoteResponse::SharedDtor() {
}

void RequestVoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteResponse& RequestVoteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteResponse_raft_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jraft.RequestVoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&votegranted_) -
        reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RequestVoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool voteGranted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_votegranted(&has_bits);
          votegranted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jraft.RequestVoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // required bool voteGranted = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_votegranted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jraft.RequestVoteResponse)
  return target;
}

size_t RequestVoteResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jraft.RequestVoteResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  if (has_votegranted()) {
    // required bool voteGranted = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RequestVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jraft.RequestVoteResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());

    // required bool voteGranted = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jraft.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jraft.RequestVoteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jraft.RequestVoteResponse)
    MergeFrom(*source);
  }
}

void RequestVoteResponse::MergeFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jraft.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      votegranted_ = from.votegranted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestVoteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jraft.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteResponse::CopyFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jraft.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RequestVoteResponse::InternalSwap(RequestVoteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(term_, other->term_);
  swap(votegranted_, other->votegranted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendEntriesRequest::InitAsDefaultInstance() {
}
class AppendEntriesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendEntriesRequest>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_peerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prevlogindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prevlogterm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_commitedindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AppendEntriesRequest::AppendEntriesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jraft.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_peerid()) {
    peerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peerid_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&commitedindex_) -
    reinterpret_cast<char*>(&term_)) + sizeof(commitedindex_));
  // @@protoc_insertion_point(copy_constructor:jraft.AppendEntriesRequest)
}

void AppendEntriesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendEntriesRequest_raft_2eproto.base);
  peerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commitedindex_) -
      reinterpret_cast<char*>(&term_)) + sizeof(commitedindex_));
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:jraft.AppendEntriesRequest)
  SharedDtor();
}

void AppendEntriesRequest::SharedDtor() {
  peerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesRequest& AppendEntriesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesRequest_raft_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jraft.AppendEntriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    peerid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&commitedindex_) -
        reinterpret_cast<char*>(&term_)) + sizeof(commitedindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AppendEntriesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string peerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_peerid(), ptr, ctx, "jraft.AppendEntriesRequest.peerId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 prevLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prevlogindex(&has_bits);
          prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 prevLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prevlogterm(&has_bits);
          prevlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_add_entries(), ptr, ctx, "jraft.AppendEntriesRequest.entries");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required int64 commitedIndex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_commitedindex(&has_bits);
          commitedindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jraft.AppendEntriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // required string peerId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_peerid().data(), static_cast<int>(this->_internal_peerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jraft.AppendEntriesRequest.peerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peerid(), target);
  }

  // required int64 prevLogIndex = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_prevlogindex(), target);
  }

  // required int64 prevLogTerm = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_prevlogterm(), target);
  }

  // repeated string entries = 5;
  for (int i = 0, n = this->_internal_entries_size(); i < n; i++) {
    const auto& s = this->_internal_entries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jraft.AppendEntriesRequest.entries");
    target = stream->WriteString(5, s, target);
  }

  // required int64 commitedIndex = 6;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_commitedindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jraft.AppendEntriesRequest)
  return target;
}

size_t AppendEntriesRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jraft.AppendEntriesRequest)
  size_t total_size = 0;

  if (has_peerid()) {
    // required string peerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peerid());
  }

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  if (has_prevlogindex()) {
    // required int64 prevLogIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prevlogindex());
  }

  if (has_prevlogterm()) {
    // required int64 prevLogTerm = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prevlogterm());
  }

  if (has_commitedindex()) {
    // required int64 commitedIndex = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_commitedindex());
  }

  return total_size;
}
size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jraft.AppendEntriesRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string peerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peerid());

    // required int64 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());

    // required int64 prevLogIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prevlogindex());

    // required int64 prevLogTerm = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prevlogterm());

    // required int64 commitedIndex = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_commitedindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string entries = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(entries_.size());
  for (int i = 0, n = entries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      entries_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jraft.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jraft.AppendEntriesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jraft.AppendEntriesRequest)
    MergeFrom(*source);
  }
}

void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jraft.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      peerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      prevlogindex_ = from.prevlogindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      prevlogterm_ = from.prevlogterm_;
    }
    if (cached_has_bits & 0x00000010u) {
      commitedindex_ = from.commitedindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppendEntriesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jraft.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jraft.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  peerid_.Swap(&other->peerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(prevlogindex_, other->prevlogindex_);
  swap(prevlogterm_, other->prevlogterm_);
  swap(commitedindex_, other->commitedindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendEntriesResponse::InitAsDefaultInstance() {
}
class AppendEntriesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendEntriesResponse>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppendEntriesResponse::AppendEntriesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jraft.AppendEntriesResponse)
}
AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:jraft.AppendEntriesResponse)
}

void AppendEntriesResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:jraft.AppendEntriesResponse)
  SharedDtor();
}

void AppendEntriesResponse::SharedDtor() {
}

void AppendEntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesResponse& AppendEntriesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesResponse_raft_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jraft.AppendEntriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&term_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AppendEntriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jraft.AppendEntriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jraft.AppendEntriesResponse)
  return target;
}

size_t AppendEntriesResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jraft.AppendEntriesResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  if (has_success()) {
    // required bool success = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jraft.AppendEntriesResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());

    // required bool success = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jraft.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jraft.AppendEntriesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jraft.AppendEntriesResponse)
    MergeFrom(*source);
  }
}

void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jraft.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppendEntriesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jraft.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jraft.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(term_, other->term_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RaftService::~RaftService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RaftService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_service_descriptors_raft_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RaftService::GetDescriptor() {
  return descriptor();
}

void RaftService::PreVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::jraft::RequestVoteRequest*,
                         ::jraft::RequestVoteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PreVote() not implemented.");
  done->Run();
}

void RaftService::RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::jraft::RequestVoteRequest*,
                         ::jraft::RequestVoteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestVote() not implemented.");
  done->Run();
}

void RaftService::AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::jraft::AppendEntriesRequest*,
                         ::jraft::AppendEntriesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AppendEntries() not implemented.");
  done->Run();
}

void RaftService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_raft_2eproto[0]);
  switch(method->index()) {
    case 0:
      PreVote(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::jraft::RequestVoteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::jraft::RequestVoteResponse*>(
                 response),
             done);
      break;
    case 1:
      RequestVote(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::jraft::RequestVoteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::jraft::RequestVoteResponse*>(
                 response),
             done);
      break;
    case 2:
      AppendEntries(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::jraft::AppendEntriesRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::jraft::AppendEntriesResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RaftService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::jraft::RequestVoteRequest::default_instance();
    case 1:
      return ::jraft::RequestVoteRequest::default_instance();
    case 2:
      return ::jraft::AppendEntriesRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RaftService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::jraft::RequestVoteResponse::default_instance();
    case 1:
      return ::jraft::RequestVoteResponse::default_instance();
    case 2:
      return ::jraft::AppendEntriesResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RaftService_Stub::RaftService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RaftService_Stub::RaftService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RaftService_Stub::~RaftService_Stub() {
  if (owns_channel_) delete channel_;
}

void RaftService_Stub::PreVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::jraft::RequestVoteRequest* request,
                              ::jraft::RequestVoteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RaftService_Stub::RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::jraft::RequestVoteRequest* request,
                              ::jraft::RequestVoteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RaftService_Stub::AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::jraft::AppendEntriesRequest* request,
                              ::jraft::AppendEntriesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace jraft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jraft::RequestVoteRequest* Arena::CreateMaybeMessage< ::jraft::RequestVoteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::jraft::RequestVoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jraft::RequestVoteResponse* Arena::CreateMaybeMessage< ::jraft::RequestVoteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::jraft::RequestVoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jraft::AppendEntriesRequest* Arena::CreateMaybeMessage< ::jraft::AppendEntriesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::jraft::AppendEntriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jraft::AppendEntriesResponse* Arena::CreateMaybeMessage< ::jraft::AppendEntriesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::jraft::AppendEntriesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
